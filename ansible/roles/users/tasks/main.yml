---
# Rôle : Gestion des utilisateurs et configurations sudo

## Description
# Ce rôle configure et sécurise les utilisateurs, les groupes, l'accès SSH, et les permissions sudo.
# Il applique les recommandations des benchmarks de sécurité **CIS**, **ANSSI**, et **DISA STIG**,
# tout en sécurisant les comptes système pour répondre aux normes de sécurité.

## Références aux benchmarks de sécurité :
# - CIS : 5.2.10, 5.1.5, 5.1.8, 6.2.1
# - ANSSI : R12, R13, R20, R23, R40
# - DISA STIG : STIG ID RHEL-07-020270

# Créer les groupes nécessaires
- name: Créer les groupes requis
  ansible.builtin.group:
    name: "{{ item }}"
    state: present
  loop: "{{ user_groups }}"
  tags:
    - users
    - groups

# Créer un utilisateur administrateur
- name: Créer un utilisateur administrateur
  ansible.builtin.user:
    name: "{{ admin_user.name }}"
    password: "{{ admin_user.password }}"
    shell: "{{ admin_user.shell }}"
    groups: "{{ admin_user.groups }}"
    append: yes
    state: present
  tags:
    - users
    - critical

# Configurer sudo pour demander un mot de passe
- name: Configurer sudo pour demander un mot de passe
  ansible.builtin.lineinfile:
    path: /etc/sudoers
    regexp: '^Defaults\s+.*!authenticate'
    line: "Defaults    {{ 'authenticate' if sudo_config.authenticate else '!authenticate' }}"
    validate: "/usr/sbin/visudo -cf %s"
  tags:
    - sudo
    - critical

# Renforcer la configuration sudo (requiretty)
#- name: Renforcer la configuration sudo (requiretty)
#  ansible.builtin.lineinfile:
#    path: /etc/sudoers
#    regexp: '^Defaults\s+.*requiretty'
#    line: "Defaults    {{ 'requiretty' if sudo_config.requiretty else '!requiretty' }}"
#    validate: "/usr/sbin/visudo -cf %s"
#  tags:
#    - sudo

# Configurer sudo pour ignorer `.` dans $PATH
- name: Configurer sudo pour ignorer `.` dans $PATH
  ansible.builtin.lineinfile:
    path: /etc/sudoers
    line: "Defaults    secure_path=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\""
    validate: "/usr/sbin/visudo -cf %s"
  tags:
    - sudo

# Configurer les comptes système avec /usr/sbin/nologin
- name: Récupérer les comptes système
  ansible.builtin.command: getent passwd
  register: passwd_entries
  changed_when: false
  tags:
    - users
    - critical

- name: Configurer les comptes système avec /usr/sbin/nologin
  ansible.builtin.user:
    name: "{{ item.split(':')[0] }}"
    shell: /usr/sbin/nologin
  loop: "{{ passwd_entries.stdout_lines | select('match', '^[^:]+:[^:]+:[^:]+:[^:]+:[^:]+:[^:]+:[^:]+') | select('search', ':x:[0-9]{1,3}:') }}"
  tags:
    - users
    - critical

# Configurer un répertoire temporaire par utilisateur
- name: Activer un répertoire temporaire par utilisateur
  ansible.builtin.lineinfile:
    path: /etc/systemd/system.conf
    regexp: '^#?PrivateTmp='
    line: "PrivateTmp=true"
  tags:
    - security
    - users

# Configurer un accès restreint pour la commande su
- name: Configurer l'accès restreint pour la commande su
  ansible.builtin.copy:
    dest: /etc/pam.d/su
    content: |
      # {{ ansible_managed }}
      auth required pam_wheel.so use_uid
    mode: "0644"
    owner: root
    group: root
  tags:
    - users
    - security

- name: Ajouter les administrateurs au groupe wheel
  ansible.builtin.user:
    name: "{{ admin_user.name }}"
    groups: wheel
    append: yes
  tags:
    - users
    - security

# Désactiver les comptes inactifs après une période configurable (STIG RHEL-07-020270)
- name: Désactiver les comptes inactifs après une période définie
  ansible.builtin.lineinfile:
    path: /etc/default/useradd
    regexp: '^#?INACTIVE='
    line: "INACTIVE={{ inactive_user_period }}"
  tags:
    - security
    - users
