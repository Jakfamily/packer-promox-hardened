---
# # Rôle : SSH-Hardening

# ## Description
# Ce rôle configure et sécurise le serveur SSH en conformité avec les recommandations des benchmarks de sécurité tels que CIS, ANSSI, et DISA STIG.

# ## Références aux benchmarks de sécurité :
# 1. **CIS (Center for Internet Security)**
#    - **5.1.1** : Configurer SSH pour utiliser uniquement la version 2.
#    - **5.2.1** : Désactiver la connexion root via SSH.
#    - **5.2.2** : Configurer une bannière d'avertissement.
#    - **5.2.3** : Limiter les algorithmes MAC à ceux qui sont robustes.
#    - **5.2.4** : Configurer `LoginGraceTime` à une minute ou moins.
#    - **5.2.5** : Activer PAM pour SSH.
#    - **5.2.6** : Configurer `MaxStartups` pour limiter les connexions simultanées.
#    - [Lien CIS Benchmarks](https://downloads.cisecurity.org/#/) *(Connexion requise)*

# 2. **ANSSI (Agence Nationale de la Sécurité des Systèmes d'Information)**
#    - **R22** : Configurer SSH pour utiliser un chiffrement robuste.
#    - **R23** : Désactiver l'accès root via SSH.
#    - **R24** : Configurer un temps limite pour les connexions SSH.
#    - [Guide ANSSI Linux](https://www.ssi.gouv.fr/uploads/IMG/pdf/anssi-guide_linux.pdf)

# 3. **DISA STIG (Defense Information Systems Agency - Security Technical Implementation Guides)**
#    - **V-72211** : Configurer une bannière d'avertissement.
#    - **V-72213** : Désactiver l'accès root via SSH.
#    - **V-72221** : Limiter le nombre de tentatives d'authentification échouées.
#    - [DISA STIG SSH](https://public.cyber.mil/stigs/downloads/)

# ## Fonctionnalités :
# - Installation du serveur OpenSSH.
# - Création et gestion d'un groupe d'utilisateurs autorisés.
# - Configuration de paramètres sécurisés via `/etc/ssh/sshd_config` :
#   - Désactivation de la connexion root.
#   - Configuration d'une bannière d'avertissement.
#   - Limitation des algorithmes MAC aux plus robustes.
#   - Configuration de `LoginGraceTime`, `MaxStartups`, et autres paramètres critiques.
# - Redémarrage du service SSH après modification.

# ## Variables :
# - `ssh_allowed_group` : Groupe des utilisateurs autorisés.
# - `ssh_allowed_users` : Liste des utilisateurs autorisés.
# - `ssh_config` : Paramètres détaillés de configuration SSH.

# ## Exemple de configuration :
# ```yaml
# ssh_allowed_group: "sshusers"
# ssh_allowed_users:
#   - "admin"
# ssh_config:
#   permit_root_login: "no"
#   protocol: "2"
#   allow_groups: "sshusers"
#   passwordauthentication: "no"
#   gssapi_authentication: "no"
#   x11_forwarding: "no"
#   allow_tcp_forwarding: "no"
#   permit_tunnel: "no"
#   client_alive_interval: 300
#   client_alive_count_max: 3
#   maxauthtries: 3
#   login_grace_time: 60
#   banner: "/etc/issue.net"
#   use_pam: "yes"
#   macs: "hmac-sha2-256,hmac-sha2-512"
#   max_startups: "10:30:60"
# ```
# ## Résumé des paramètres sécurisés :
# - **Désactivation de la connexion root** : Empêche les connexions SSH via l'utilisateur root.
# - **Bannière d'avertissement** : Affiche un message légal avant l'authentification.
# - **Algorithmes MAC robustes** : Limite les algorithmes aux plus sécurisés.
# - **Temps limite de connexion** : Réduit les risques liés aux tentatives longues.
# - **Connexion persistante sécurisée** : Configure les intervalles et les limites de connexion.

# ## Notes importantes :
# - Ce rôle est compatible avec les environnements Linux basés sur Debian et RHEL.
# - Toute modification manuelle des fichiers gérés par ce rôle sera remplacée lors de la prochaine exécution d'Ansible.

# Installer le serveur SSH si nécessaire
- name: Installer le paquet OpenSSH Server
  ansible.builtin.package:
    name: openssh-server
    state: present
  tags:
    - ssh
    - installation

# Créer un groupe pour les utilisateurs autorisés à se connecter via SSH
- name: Créer le groupe sshusers
  ansible.builtin.group:
    name: "{{ ssh_allowed_group }}"
    state: present
  tags:
    - ssh
    - security

# Ajouter les utilisateurs au groupe sshusers
- name: Ajouter les utilisateurs au groupe sshusers
  ansible.builtin.user:
    name: "{{ item }}"
    groups: "{{ ssh_allowed_group }}"
    append: yes
  loop: "{{ ssh_allowed_users }}"
  tags:
    - ssh
    - security

# Configurer SSH avec les paramètres sécurisés
- name: Configurer SSH de manière sécurisée
  ansible.builtin.copy:
    dest: /etc/ssh/sshd_config
    content: |
      # {{ ansible_managed }}
      PermitRootLogin {{ ssh_config.permit_root_login }}
      Protocol {{ ssh_config.protocol }}
      AllowGroups {{ ssh_config.allow_groups }}
      PasswordAuthentication {{ ssh_config.passwordauthentication }}
      GSSAPIAuthentication {{ ssh_config.gssapi_authentication }}
      X11Forwarding {{ ssh_config.x11_forwarding }}
      AllowTcpForwarding {{ ssh_config.allow_tcp_forwarding }}
      PermitTunnel {{ ssh_config.permit_tunnel }}
      ClientAliveInterval {{ ssh_config.client_alive_interval }}
      ClientAliveCountMax {{ ssh_config.client_alive_count_max }}
      MaxAuthTries {{ ssh_config.maxauthtries }}
      LoginGraceTime {{ ssh_config.login_grace_time }}
      Banner {{ ssh_config.banner }}
      UsePAM {{ ssh_config.use_pam }}
      MACs {{ ssh_config.macs }}
      MaxStartups {{ ssh_config.max_startups }}
    mode: "0600"
    owner: root
    group: root
  notify: Restart SSH service
  tags:
    - ssh
    - security
